% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MCMC_function.R
\name{fit_mcmc_bezier}
\alias{fit_mcmc_bezier}
\title{Main MCMC fit function}
\usage{
fit_mcmc_bezier(
  N,
  r,
  w,
  r_0,
  priors = list(p0y_mean = 0, p0y_sd = 1, p1x_mean = 0, p1x_sd = 1, p1y_mean = 0, p1y_sd
    = 1, p2x_mean = 0, p2x_sd = 1, p3_mean = 0, p3_sd = 1, p4y_mean = 0, p4y_sd = 1,
    p5x_mean = 0, p5x_sd = 1, p5y_mean = 0, p5y_sd = 1, p6x_mean = 0, p6x_sd = 1,
    alpha_mean = 0, alpha_sd = 1),
  inits = list(p0y = qnorm(0.5), p1x = qnorm(0.01), p1y = qnorm(0.99), p2x = qnorm(0.5),
    p3 = qnorm(0.8), p4y = qnorm(0.5), p5y = qnorm(0.01), p5x = qnorm(0.99), p6x =
    qnorm(0.5)),
  pmix = list(pmix0 = 0.1, pmix1 = 0.1, pmix2 = c(0.1, 0.1), pmix3 = 0.4),
  iters = 11000,
  burn = 1000,
  print.every = 1000,
  traceplot = T
)
}
\arguments{
\item{N}{Number of data points that the truncated Gamma distribution is to be fitted to}

\item{r}{Vector of radii of length N}

\item{w}{Vector of angles of length N}

\item{r_0}{Vector of truncation thresholds of length N}

\item{priors}{list of priors}

\item{inits}{list of initial values}

\item{pmix}{list of mixture components}

\item{iters}{Total number of iterations}

\item{burn}{Number of burn-in iterations}

\item{print.every}{How many iterations between output}

\item{traceplot}{Plot traceplot (TRUE/FALSE)}
}
\value{
\code{samples} Matrix of MCMC samples of Bezier control points, shape parameter, and eta
}
\description{
This function is the main MCMC function to fit a 2D Bezier spline to the limit set boundary of bivariate data in exponential margins
}
\examples{
set.seed(1)
simdata             <- gen_data_exp(n = 500, theta = 0.3, tau=0.75, copula = 'l')
x                   <- simdata$x
r                   <- simdata$r
w                   <- simdata$w
data_marg_r_0       <- simdata$data_marg_r_0
samples  <- fit_mcmc_bezier( N = data_marg_r_0$N,
                         r = data_marg_r_0$r,
                         w = data_marg_r_0$w,
                         r_0 = data_marg_r_0$r_0,
                         iters = 1100, burn = 100,
                         traceplot=T, print.every = 100)
median(samples[101:1100,11]) # posterior median of eta
}
